name: $(SourceBranchName).$(Date:yyMMdd).$(Rev:r)

trigger:
  paths:
    include:
      - odj-ok-mobile-app/*
  branches:
    include:
      - stage/*

parameters:
  - name: buildFlavor
    displayName: Build flavor
    type: string
    default: "none"
    values:
      - none
      - dev
      - tst
      - uat
      - prd
  - name: configType
    displayName: Config type
    type: string
    default: "kaufland"
    values:
      - kaufland
      - lidl
  - name: flutterVersion
    displayName: Flutter version
    type: string
    default: "3.35.5"

pool:
  vmImage: macOS-latest

variables:
  - name: workingDirectory
    value: "$(System.DefaultWorkingDirectory)/odj-ok-mobile-app"
  - name: buildNumber
    value: $[counter('buildNumber',1)]
  - name: buildFlavor
    ${{ if and(eq(parameters.buildFlavor, 'none'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/stage/'))) }}:
      value: ""
    ${{ if ne(parameters.buildFlavor, 'none') }}:
      value: ${{ parameters.buildFlavor }}
    ${{ if and(eq(parameters.buildFlavor, 'none'), eq(variables['Build.SourceBranch'], 'refs/heads/stage/dev')) }}:
      value: "dev"
    ${{ if and(eq(parameters.buildFlavor, 'none'), eq(variables['Build.SourceBranch'], 'refs/heads/stage/tst')) }}:
      value: "tst"
    ${{ if and(eq(parameters.buildFlavor, 'none'), eq(variables['Build.SourceBranch'], 'refs/heads/stage/uat')) }}:
      value: "uat"
    ${{ if and(eq(parameters.buildFlavor, 'none'), eq(variables['Build.SourceBranch'], 'refs/heads/stage/prd')) }}:
      value: "prd"
  - name: configType
    value: ${{ parameters.configType }}

stages:
  - stage: build_and_validate
    displayName: Build and Validate
    jobs:
      - job: BuildAndValidate
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              VERSION=$(cat version.md | tr -d '\n\r')
              echo "##vso[task.setvariable variable=version]$VERSION"
              echo "##vso[build.updatebuildnumber]$(buildFlavor) $(configType) $VERSION-$(Build.BuildNumber)#$(buildNumber)"
            displayName: "Add Version to Build Number"
            name: UpdateBuildVersion
          - task: Hey24sheep.flutter.flutter-install.FlutterInstall@0
            displayName: Install Flutter
            name: flutterInstall
            inputs:
              mode: "auto"
              channel: "stable"
              version: "custom"
              customVersion: ${{ parameters.flutterVersion }}

          - task: CmdLine@2
            displayName: Activate Melos
            name: activateMelos
            inputs:
              script: "flutter pub global activate melos"
              workingDirectory: "$(workingDirectory)"

          - task: CmdLine@2
            displayName: Melos Bootstrap
            name: melosBootstrap
            inputs:
              script: "flutter pub global run melos bootstrap"
              workingDirectory: "$(workingDirectory)"

          - task: CmdLine@2
            displayName: Static Code Analysis
            name: staticCodeAnalysis
            inputs:
              script: "flutter pub global run melos run analyze"
              workingDirectory: "$(workingDirectory)"

          - task: CmdLine@2
            displayName: Check The Formatting
            name: checkTheFormatting
            inputs:
              script: "flutter pub global run melos run format"
              workingDirectory: "$(workingDirectory)"

          - task: CmdLine@2
            displayName: Tests
            name: tests
            inputs:
              script: "flutter pub global run melos run test"
              workingDirectory: "$(workingDirectory)"

          - task: CmdLine@2
            displayName: Validate SSL Certificates and Certificate Pinning for All Environments
            name: validateAllEnvironments
            inputs:
              script: |
                echo "=========================================="
                echo "Running SSL certificate and fingerprint validation for ALL environments"
                echo "Pipeline execution triggered for environment: $(buildFlavor)"
                echo "Config type: $(configType)"
                echo "=========================================="
                
                # Function to check SSL certificate and fingerprint for a specific environment
                check_environment() {
                  local env=$1
                  local server_url=""
                  
                  echo ""
                  echo "🔍 Validating environment: $env"
                  echo "----------------------------------------"
                  
                  # Determine server URL based on environment and configType
                  case "$env" in
                    "dev")
                      if [ "$(configType)" = "kaufland" ]; then
                        server_url="https://api.dev.operatorkaucyjny.pl"
                      else
                        server_url="https://dev.api-int.schwarz"
                      fi
                      ;;
                    "tst")
                      if [ "$(configType)" = "kaufland" ]; then
                        server_url="https://api.tst.operatorkaucyjny.pl"
                      else
                        server_url="https://test.api-int.schwarz"
                      fi
                      ;;
                    "uat")
                      if [ "$(configType)" = "kaufland" ]; then
                        server_url="https://api.uat.operatorkaucyjny.pl"
                      else
                        server_url="https://qas.api-int.schwarz"
                      fi
                      ;;
                    "prd")
                      if [ "$(configType)" = "kaufland" ]; then
                        server_url="https://api.panel.operatorkaucyjny.pl"
                      else
                        server_url="https://live.api-int.schwarz"
                      fi
                      ;;
                  esac
                  
                  echo "Checking SSL certificate for: $server_url"
                  
                  # Extract hostname from URL
                  local hostname=$(echo "$server_url" | sed 's|https://||' | sed 's|/.*||')
                  
                  # Get certificate expiry date
                  local expiry_date=$(echo | openssl s_client -servername "$hostname" -connect "$hostname:443" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)
                  
                  if [ -z "$expiry_date" ]; then
                    echo "##vso[task.logissue type=error][$env] Failed to retrieve SSL certificate information for $hostname"
                    return 1
                  fi
                  
                  echo "Certificate expires on: $expiry_date"
                  
                  # Convert expiry date to epoch for calculation (macOS compatible)
                  local expiry_epoch=$(date -j -f "%b %d %H:%M:%S %Y %Z" "$expiry_date" +%s 2>/dev/null)
                  local current_epoch=$(date +%s)
                  local days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
                  
                  echo "Days until expiry: $days_until_expiry"
                  
                  # Check expiry thresholds - show error only if certificate expires in less than 45 days
                  if [ $days_until_expiry -lt 0 ]; then
                    echo "##vso[task.logissue type=error][$env] SSL certificate has EXPIRED $((days_until_expiry * -1)) days ago! IMMEDIATE ACTION REQUIRED - Certificate renewal needed"
                  elif [ $days_until_expiry -lt 45 ]; then
                    echo "##vso[task.logissue type=error][$env] SSL certificate expires in $days_until_expiry days - ACTION REQUIRED: Please renew the certificate"
                  else
                    echo "✅ [$env] SSL certificate is valid for $days_until_expiry more days"
                  fi
                  
                  # Certificate Pinning Validation
                  echo "Validating certificate pinning for $env environment..."
                  
                  # Get the actual certificate fingerprint
                  local actual_fingerprint=$(echo | openssl s_client -servername "$hostname" -connect "$hostname:443" 2>/dev/null | openssl x509 -noout -fingerprint -sha256 | cut -d= -f2 | tr -d ':')
                  
                  if [ -z "$actual_fingerprint" ]; then
                    echo "##vso[task.logissue type=error][$env] Failed to get certificate fingerprint for $hostname"
                    return 1
                  fi
                  
                  echo "Server certificate SHA256 fingerprint: $actual_fingerprint"
                  
                  # Get pinned certificates from the Flutter app code based on environment
                  local cert_config_file="$(workingDirectory)/packages/ok_mobile_domain/lib/dio/certificate_pinning/certificate_config.dart"
                  local pinned_certs=""
                  
                  case "$env" in
                    "dev")
                      pinned_certs=$(grep -A 10 "class DevCertificateConfig" "$cert_config_file" | grep -o "'[A-Fa-f0-9]\{64\}'" | tr -d "'" | tr '[:lower:]' '[:upper:]')
                      ;;
                    "tst")
                      pinned_certs=$(grep -A 10 "class TstCertificateConfig" "$cert_config_file" | grep -o "'[A-Fa-f0-9]\{64\}'" | tr -d "'" | tr '[:lower:]' '[:upper:]')
                      ;;
                    "uat")
                      pinned_certs=$(grep -A 10 "class UatCertificateConfig" "$cert_config_file" | grep -o "'[A-Fa-f0-9]\{64\}'" | tr -d "'" | tr '[:lower:]' '[:upper:]')
                      ;;
                    "prd")
                      pinned_certs=$(grep -A 10 "class PrdCertificateConfig" "$cert_config_file" | grep -o "'[A-Fa-f0-9]\{64\}'" | tr -d "'" | tr '[:lower:]' '[:upper:]')
                      ;;
                  esac
                  
                  if [ -z "$pinned_certs" ]; then
                    echo "##vso[task.logissue type=warning][$env] No pinned certificates found in certificate configuration"
                  else
                    echo "Pinned certificates for $env environment:"
                    echo "$pinned_certs" | while read -r cert; do
                      if [ -n "$cert" ]; then
                        echo "  - $cert"
                      fi
                    done
                    
                    # Check if actual fingerprint matches any pinned certificate
                    local match_found=false
                    while IFS= read -r pinned_cert; do
                      if [ -n "$pinned_cert" ] && [ "$actual_fingerprint" = "$pinned_cert" ]; then
                        echo "✅ [$env] Certificate fingerprint matches pinned certificate: $pinned_cert"
                        match_found=true
                        break
                      fi
                    done <<< "$pinned_certs"
                    
                    if [ "$match_found" = false ]; then
                      echo "##vso[task.logissue type=error][$env] Certificate fingerprint does not match any pinned certificates!"
                      echo "##vso[task.logissue type=error][$env] Actual fingerprint: $actual_fingerprint"
                      echo "##vso[task.logissue type=error][$env] This indicates either:"
                      echo "##vso[task.logissue type=error][$env]   1. Certificate has been renewed - update certificate pinning in code"
                      echo "##vso[task.logissue type=error][$env]   2. Configuration mismatch for environment"
                      echo "##vso[task.logissue type=error][$env]   3. Potential security issue - investigate immediately"
                    fi
                  fi
                }
                
                # Validate all environments
                environments=("dev" "tst" "uat" "prd")
                validation_errors=0
                
                for env in "${environments[@]}"; do
                  if ! check_environment "$env"; then
                    validation_errors=$((validation_errors + 1))
                  fi
                done
                
                echo ""
                echo "=========================================="
                echo "Validation Summary:"
                echo "- Environments checked: ${#environments[@]}"
                echo "- Validation errors: $validation_errors"
                if [ $validation_errors -gt 0 ]; then
                  echo "⚠️  Some validations failed - check logs above for details"
                  echo "Note: Build will continue, but issues should be addressed"
                else
                  echo "✅ All environment validations passed successfully"
                fi
                echo "=========================================="
              workingDirectory: "$(workingDirectory)"

          # Distribution steps, only run if buildFlavor is not empty
          - ${{ if and(ne(variables.buildFlavor, ''), ne(variables.configType, '')) }}:
              - task: JavaToolInstaller@0
                inputs:
                  versionSpec: "21"
                  jdkArchitectureOption: "x64"
                  jdkSourceOption: "PreInstalled"

              - task: DownloadSecureFile@1
                name: key
                inputs:
                  secureFile: "upload-keystore.jks"

              - script: cp "$(key.secureFilePath)" "$(workingDirectory)/apps/primary_app"
                displayName: "Copy upload key"

              - task: DownloadSecureFile@1
                name: properties
                inputs:
                  secureFile: "keystore.properties"
              - script: cp "$(properties.secureFilePath)" "$(workingDirectory)/apps/primary_app/android"
                displayName: "Copy key.properties"

              - task: Hey24sheep.flutter.flutter-build.FlutterBuild@0
                inputs:
                  target: 'apk'
                  projectDirectory: '$(workingDirectory)/apps/primary_app/'
                  buildFlavour: '$(buildFlavor)'
                  buildNumber: '$(buildNumber)'
                  buildName: '$(version)'
                  entryPoint: 'lib/main.dart'
                  extraArgs: >
                    --dart-define=CONFIG_TYPE=$(configType)
                    --dart-define=FLAVOR=$(buildFlavor)
              - task: CmdLine@2
                displayName: Copy Build
                name: copyBuild
                inputs:
                  script: 'cp "$(workingDirectory)/apps/primary_app/build/app/outputs/flutter-apk/app-$(buildFlavor)-release.apk" "$(Build.ArtifactStagingDirectory)/app-$(buildFlavor)-release-$(version).apk"'
              - task: PublishBuildArtifacts@1
                inputs:
                  pathToPublish: '$(Build.ArtifactStagingDirectory)'
                  artifactName: 'mobile_$(buildFlavor)_$(configType)_$(version)_$(buildNumber)'
